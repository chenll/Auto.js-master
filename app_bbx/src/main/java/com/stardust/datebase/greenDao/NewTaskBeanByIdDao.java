package com.stardust.datebase.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.stardust.auojs.inrt.bean.NewTaskBeanById;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_TASK_BEAN_BY_ID".
*/
public class NewTaskBeanByIdDao extends AbstractDao<NewTaskBeanById, String> {

    public static final String TABLENAME = "NEW_TASK_BEAN_BY_ID";

    /**
     * Properties of entity NewTaskBeanById.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property F_Id = new Property(0, String.class, "f_Id", true, "F__ID");
        public final static Property F_PackageName = new Property(1, String.class, "f_PackageName", false, "F__PACKAGE_NAME");
        public final static Property F_AppName = new Property(2, String.class, "f_AppName", false, "F__APP_NAME");
        public final static Property F_AppVersion = new Property(3, String.class, "f_AppVersion", false, "F__APP_VERSION");
        public final static Property TotalNumber = new Property(4, int.class, "totalNumber", false, "TOTAL_NUMBER");
        public final static Property SlidingSpeed = new Property(5, int.class, "slidingSpeed", false, "SLIDING_SPEED");
        public final static Property WaitForTime = new Property(6, int.class, "waitForTime", false, "WAIT_FOR_TIME");
        public final static Property SingleSlideTimes = new Property(7, int.class, "singleSlideTimes", false, "SINGLE_SLIDE_TIMES");
        public final static Property SlidingInterval = new Property(8, int.class, "slidingInterval", false, "SLIDING_INTERVAL");
        public final static Property IsExecuted = new Property(9, boolean.class, "isExecuted", false, "IS_EXECUTED");
        public final static Property IsExecutedSussed = new Property(10, boolean.class, "isExecutedSussed", false, "IS_EXECUTED_SUSSED");
        public final static Property Sort = new Property(11, int.class, "sort", false, "SORT");
    }


    public NewTaskBeanByIdDao(DaoConfig config) {
        super(config);
    }
    
    public NewTaskBeanByIdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_TASK_BEAN_BY_ID\" (" + //
                "\"F__ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: f_Id
                "\"F__PACKAGE_NAME\" TEXT," + // 1: f_PackageName
                "\"F__APP_NAME\" TEXT," + // 2: f_AppName
                "\"F__APP_VERSION\" TEXT," + // 3: f_AppVersion
                "\"TOTAL_NUMBER\" INTEGER NOT NULL ," + // 4: totalNumber
                "\"SLIDING_SPEED\" INTEGER NOT NULL ," + // 5: slidingSpeed
                "\"WAIT_FOR_TIME\" INTEGER NOT NULL ," + // 6: waitForTime
                "\"SINGLE_SLIDE_TIMES\" INTEGER NOT NULL ," + // 7: singleSlideTimes
                "\"SLIDING_INTERVAL\" INTEGER NOT NULL ," + // 8: slidingInterval
                "\"IS_EXECUTED\" INTEGER NOT NULL ," + // 9: isExecuted
                "\"IS_EXECUTED_SUSSED\" INTEGER NOT NULL ," + // 10: isExecutedSussed
                "\"SORT\" INTEGER NOT NULL );"); // 11: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_TASK_BEAN_BY_ID\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewTaskBeanById entity) {
        stmt.clearBindings();
 
        String f_Id = entity.getF_Id();
        if (f_Id != null) {
            stmt.bindString(1, f_Id);
        }
 
        String f_PackageName = entity.getF_PackageName();
        if (f_PackageName != null) {
            stmt.bindString(2, f_PackageName);
        }
 
        String f_AppName = entity.getF_AppName();
        if (f_AppName != null) {
            stmt.bindString(3, f_AppName);
        }
 
        String f_AppVersion = entity.getF_AppVersion();
        if (f_AppVersion != null) {
            stmt.bindString(4, f_AppVersion);
        }
        stmt.bindLong(5, entity.getTotalNumber());
        stmt.bindLong(6, entity.getSlidingSpeed());
        stmt.bindLong(7, entity.getWaitForTime());
        stmt.bindLong(8, entity.getSingleSlideTimes());
        stmt.bindLong(9, entity.getSlidingInterval());
        stmt.bindLong(10, entity.getIsExecuted() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsExecutedSussed() ? 1L: 0L);
        stmt.bindLong(12, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewTaskBeanById entity) {
        stmt.clearBindings();
 
        String f_Id = entity.getF_Id();
        if (f_Id != null) {
            stmt.bindString(1, f_Id);
        }
 
        String f_PackageName = entity.getF_PackageName();
        if (f_PackageName != null) {
            stmt.bindString(2, f_PackageName);
        }
 
        String f_AppName = entity.getF_AppName();
        if (f_AppName != null) {
            stmt.bindString(3, f_AppName);
        }
 
        String f_AppVersion = entity.getF_AppVersion();
        if (f_AppVersion != null) {
            stmt.bindString(4, f_AppVersion);
        }
        stmt.bindLong(5, entity.getTotalNumber());
        stmt.bindLong(6, entity.getSlidingSpeed());
        stmt.bindLong(7, entity.getWaitForTime());
        stmt.bindLong(8, entity.getSingleSlideTimes());
        stmt.bindLong(9, entity.getSlidingInterval());
        stmt.bindLong(10, entity.getIsExecuted() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsExecutedSussed() ? 1L: 0L);
        stmt.bindLong(12, entity.getSort());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NewTaskBeanById readEntity(Cursor cursor, int offset) {
        NewTaskBeanById entity = new NewTaskBeanById( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // f_Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // f_PackageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // f_AppName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // f_AppVersion
            cursor.getInt(offset + 4), // totalNumber
            cursor.getInt(offset + 5), // slidingSpeed
            cursor.getInt(offset + 6), // waitForTime
            cursor.getInt(offset + 7), // singleSlideTimes
            cursor.getInt(offset + 8), // slidingInterval
            cursor.getShort(offset + 9) != 0, // isExecuted
            cursor.getShort(offset + 10) != 0, // isExecutedSussed
            cursor.getInt(offset + 11) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewTaskBeanById entity, int offset) {
        entity.setF_Id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setF_PackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setF_AppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setF_AppVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalNumber(cursor.getInt(offset + 4));
        entity.setSlidingSpeed(cursor.getInt(offset + 5));
        entity.setWaitForTime(cursor.getInt(offset + 6));
        entity.setSingleSlideTimes(cursor.getInt(offset + 7));
        entity.setSlidingInterval(cursor.getInt(offset + 8));
        entity.setIsExecuted(cursor.getShort(offset + 9) != 0);
        entity.setIsExecutedSussed(cursor.getShort(offset + 10) != 0);
        entity.setSort(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewTaskBeanById entity, long rowId) {
        return entity.getF_Id();
    }
    
    @Override
    public String getKey(NewTaskBeanById entity) {
        if(entity != null) {
            return entity.getF_Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewTaskBeanById entity) {
        return entity.getF_Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
